import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types
from mosreg_schedule_selenium import MosregSchedule
import threading
import queue

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
schedule_queue = queue.Queue()

def get_next_workday(current_date):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ)
    """
    next_day = current_date + timedelta(days=1)
    while next_day.weekday() >= 5:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        next_day += timedelta(days=1)
    return next_day

def get_schedule(date=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    try:
        scheduler = MosregSchedule(headless=True)
        lessons = scheduler.get_schedule(date)
        scheduler.close()
        return lessons
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

def format_schedule(lessons, date_str):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    if not lessons:
        return f"üìÖ *–ù–∞ {date_str} —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç*\n\n–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å –∏–ª–∏ –∫–∞–Ω–∏–∫—É–ª—ã."
    
    if len(lessons) == 0:
        return f"üìÖ *–ù–∞ {date_str} —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç*\n\n–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å –∏–ª–∏ –∫–∞–Ω–∏–∫—É–ª—ã."
    
    message = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}*\n\n"
    
    for i, lesson in enumerate(lessons, 1):
        message += f"*{i}. {lesson['subject']}*\n"
        
        if lesson['start_time'] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or lesson['end_time'] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            time_str = f"{lesson['start_time']}"
            if lesson['end_time'] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                time_str += f" - {lesson['end_time']}"
            message += f"‚è∞ {time_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if 'homework' in lesson and lesson['homework'] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            message += f"üìö –ó–∞–¥–∞–Ω–∏–µ: {lesson['homework']}\n"
        
        message += "\n"
    
    return message

def process_schedule_request(message, date):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    try:
        lessons = get_schedule(date)
        schedule_queue.put((message.chat.id, format_schedule(lessons, date)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        schedule_queue.put((message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))

@bot.message_handler(commands=['start'])
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user = message.from_user
    bot.reply_to(
        message,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ú–≠–®.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/date - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "üìö *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/date - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "*–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /date\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-03-2025)\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ cookies.json, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏."
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['today'])
def today_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today
    """
    bot.reply_to(message, "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è... ‚è≥")
    
    today = datetime.now().strftime("%d-%m-%Y")
    today_readable = datetime.now().strftime("%d.%m.%Y")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=process_schedule_request,
        args=(message, today)
    )
    thread.start()

@bot.message_handler(commands=['tomorrow'])
def tomorrow_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow
    """
    today = datetime.now()
    next_workday = get_next_workday(today)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    next_workday_str = next_workday.strftime("%d-%m-%Y")
    next_workday_readable = next_workday.strftime("%d.%m.%Y")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤—ã—Ö–æ–¥–Ω—ã–º
    if next_workday.weekday() >= 5:
        day_name = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" if next_workday.weekday() == 0 else "—Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
        bot.reply_to(message, f"–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({next_workday_readable})... ‚è≥")
    else:
        bot.reply_to(message, f"–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({next_workday_readable})... ‚è≥")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=process_schedule_request,
        args=(message, next_workday_str)
    )
    thread.start()

@bot.message_handler(commands=['date'])
def date_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /date
    """
    msg = bot.reply_to(
        message,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15-03-2025"
    )
    bot.register_next_step_handler(msg, process_date)

def process_date(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    """
    date_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.strptime(date_text, "%d-%m-%Y")
    except ValueError:
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-03-2025)."
        )
        return
    
    bot.reply_to(message, f"–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}... ‚è≥")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=process_schedule_request,
        args=(message, date_text)
    )
    thread.start()

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

def check_schedule_queue():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    """
    while True:
        try:
            chat_id, message = schedule_queue.get_nowait()
            bot.send_message(chat_id, message, parse_mode="Markdown")
        except queue.Empty:
            break
    bot.threading.Timer(1.0, check_schedule_queue).start()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    check_schedule_queue()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    bot.infinity_polling()

if __name__ == "__main__":
    main() 